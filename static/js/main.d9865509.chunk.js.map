{"version":3,"sources":["Context/ContextProvider.jsx","imgs/svg/icon-search-mod-noc.svg","imgs/svg/icon-search.svg","Components/AutocompleteCategory.jsx","Helpers/getGifBySuggestion.js","imgs/svg/ilustra_header.svg","Components/GiphySearchBar.jsx","Helpers/getGifs.js","Helpers/customMemoization.js","Components/GifGridItem.jsx","imgs/png/error.png","Components/NotFoundResult.jsx","Components/common/Spinner.jsx","Components/GridResult.jsx","Hooks/useFetchGif.js","imgs/svg/logo-desktop.svg","imgs/svg/logo-mobile-modo-noct.svg","Components/Header.jsx","App.js","index.js"],"names":["AppContext","React","createContext","ContextProvider","children","useState","gifCategory","setGifCategories","isSearchSend","setIsSearchSend","modeDark","setModeDark","cssTextMode","setCssTextMode","useEffect","Provider","value","AutocompleteCategory","setInputValue","suggestionList","useContext","className","length","map","name","src","searchIcon","searchIconAuto","alt","onClick","suggestion","getGifBySuggestion","inputValue","setValueFunction","a","fetch","request","json","data","GiphySearchBar","setSuggestionList","ilustraHeader","onSubmit","e","preventDefault","trim","type","onChange","target","placeholder","getGifs","fn","state","arg","customMemoization","category","apiKey","searchType","encodeURI","url","resp","gifs","img","id","title","images","downsized_medium","GifGridItem","href","rel","NotFoundResult","error","Spinner","GridResult","loading","setState","then","imgs","useFetchGifs","Header","logoDark","logo","App","description","Helmet","content","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d9865509.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport const AppContext = React.createContext();\r\n\r\nexport default function ContextProvider({ children }) {\r\n  const [gifCategory, setGifCategories] = useState(\"\");\r\n  const [isSearchSend, setIsSearchSend] = useState(false);\r\n  const [modeDark, setModeDark] = useState(false);\r\n  const [cssTextMode, setCssTextMode] = useState(\"light\");\r\n\r\n  useEffect(() => {\r\n    const cssText = modeDark ? \"dark\" : \"light\";\r\n    setCssTextMode(cssText);\r\n  }, [modeDark]);\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        gifCategory,\r\n        setGifCategories,\r\n        isSearchSend,\r\n        setIsSearchSend,\r\n        modeDark,\r\n        setModeDark,\r\n        cssTextMode\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/icon-search-mod-noc.ecc2b197.svg\";","export default __webpack_public_path__ + \"static/media/icon-search.657bf939.svg\";","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../Context/ContextProvider\";\r\nimport searchIcon from \"../imgs/svg/icon-search-mod-noc.svg\";\r\nimport searchIconAuto from \"../imgs/svg/icon-search.svg\";\r\n\r\nexport default function AutocompleteCategory({\r\n  setInputValue,\r\n  suggestionList\r\n}) {\r\n  const {\r\n    setGifCategories,\r\n    setIsSearchSend,\r\n    modeDark,\r\n    cssTextMode\r\n  } = useContext(AppContext);\r\n\r\n  const searchBySuggestion = (suggestion) => {\r\n    setIsSearchSend(true);\r\n    setGifCategories(suggestion);\r\n    setInputValue(\"\");\r\n  };\r\n  return (\r\n    <div className={suggestionList.length && \"p-absolute\"}>\r\n      {suggestionList.map(({ name }) => (\r\n        <div className=\"p-relative\" key={name}>\r\n          <img\r\n            src={modeDark ? searchIcon : searchIconAuto}\r\n            className=\"search-icon-auto\"\r\n            alt=\"\"\r\n          />\r\n          <li\r\n            onClick={() => searchBySuggestion(name)}\r\n            className={`li-autocomplete-${cssTextMode}`}\r\n          >\r\n            {name}\r\n          </li>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","export const getGifBySuggestion = async (inputValue, setValueFunction) => {\r\n    const key = \"gXsfPNJlsOfkekKEAerHBmwthwr5XXXJ\";\r\n    const request = await fetch(\r\n      `https://api.giphy.com/v1/gifs/search/tags?api_key=${key}&q=${inputValue}&limit=5&offset=0&rating=g&lang=en`\r\n    );\r\n    const { data } = await request.json();\r\n    setValueFunction(data);\r\n  };\r\n  ","export default __webpack_public_path__ + \"static/media/ilustra_header.9d4669b1.svg\";","import React, { useState, useContext, useEffect } from \"react\";\r\nimport AutocompleteCategory from \"./AutocompleteCategory\";\r\nimport { AppContext } from \"../Context/ContextProvider\";\r\nimport { getGifBySuggestion } from \"../Helpers/getGifBySuggestion\";\r\nimport ilustraHeader from \"../imgs/svg/ilustra_header.svg\";\r\nimport searchIcon from \"../imgs/svg/icon-search-mod-noc.svg\";\r\n\r\nexport default function GiphySearchBar() {\r\n  const { setGifCategories, setIsSearchSend, cssTextMode } = useContext(\r\n    AppContext\r\n  );\r\n\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [suggestionList, setSuggestionList] = useState([]);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setIsSearchSend(true);\r\n      setGifCategories(inputValue);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getGifBySuggestion(inputValue, setSuggestionList);\r\n  }, [inputValue]);\r\n\r\n  return (\r\n    <div className={`mode-${cssTextMode}`}>\r\n      <div className=\"header-title-container\">\r\n        <p className={`header-text-start mode-${cssTextMode}`}>\r\n          Â¡Inspirate y busca los mejores\r\n        </p>\r\n        <p className={`header-text-end mode-${cssTextMode}`}>&nbsp;GIFS!</p>\r\n      </div>\r\n      <img src={ilustraHeader} className=\"header-img\" alt=\"Imagen Header\" />\r\n      <form onSubmit={handleSubmit} className=\"form-container\">\r\n        <input\r\n          type=\"text\"\r\n          className={`input-format input-${cssTextMode}`}\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          placeholder=\"busca aquÃ­ tus gifs favoritos\"\r\n        />\r\n        <button className={`search-icon-container-${cssTextMode}`}>\r\n          <img src={searchIcon} className=\"search-svg\" alt=\"Search Icon\" />\r\n        </button>\r\n        <AutocompleteCategory\r\n          setInputValue={setInputValue}\r\n          suggestionList={suggestionList}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import { customMemoization } from \"./customMemoization\";\r\n\r\nexport const getGifs = customMemoization(async (category) => {\r\n  const apiKey = \"gXsfPNJlsOfkekKEAerHBmwthwr5XXXJ\";\r\n  const searchType =\r\n    category === \"\"\r\n      ? `trending?api_key=${apiKey}&limit=15&rating=g`\r\n      : `search?q=${encodeURI(category)}&limit=15&api_key=${apiKey}`;\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/${searchType}`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    };\r\n  });\r\n  return gifs;\r\n});\r\n","export const customMemoization = (fn) => {\r\n  let state = {};\r\n  return (arg) => {\r\n    if (!state[arg]) {\r\n      state[arg] = fn(arg);\r\n    }\r\n    return state[arg];\r\n  };\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function GifGridItem({ url, title }) {\r\n  return (\r\n    <div className=\"card-gif animate__animated animate__fadeIn\">\r\n      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <img className=\"gif-Img\" src={url} alt={title} />\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/error.da5924c7.png\";","import React from \"react\";\r\nimport error from \"../imgs/png/error.png\";\r\n\r\nexport default function NotFoundResult() {\r\n  return (\r\n    <div className=\"height-100\">\r\n      <h2>\r\n        Lo sentimos no encontramos resultados, intenta con otra categoria...\r\n      </h2>\r\n      <img src={error} className=\"not-found-img\" alt=\"not found\" />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"../common/spinner.css\";\r\n\r\nexport default function Spinner() {\r\n  return (\r\n    <div className=\"sk-fading-circle\">\r\n      <div className=\"sk-circle1 sk-circle\"></div>\r\n      <div className=\"sk-circle2 sk-circle\"></div>\r\n      <div className=\"sk-circle3 sk-circle\"></div>\r\n      <div className=\"sk-circle4 sk-circle\"></div>\r\n      <div className=\"sk-circle5 sk-circle\"></div>\r\n      <div className=\"sk-circle6 sk-circle\"></div>\r\n      <div className=\"sk-circle7 sk-circle\"></div>\r\n      <div className=\"sk-circle8 sk-circle\"></div>\r\n      <div className=\"sk-circle9 sk-circle\"></div>\r\n      <div className=\"sk-circle10 sk-circle\"></div>\r\n      <div className=\"sk-circle11 sk-circle\"></div>\r\n      <div className=\"sk-circle12 sk-circle\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../Context/ContextProvider\";\r\nimport { useFetchGifs } from \"../Hooks/useFetchGif\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport NotFoundResult from \"./NotFoundResult\";\r\nimport Spinner from \"./common/Spinner\";\r\n\r\nexport default function GridResult() {\r\n  const { isSearchSend, gifCategory, cssTextMode } = useContext(AppContext);\r\n  const { data: images, loading } = useFetchGifs(gifCategory);\r\n  return (\r\n    <div className={`mode-${cssTextMode}`}>\r\n      <h2 className={`gridResult-title mode-${cssTextMode}`}>\r\n        {!loading && isSearchSend\r\n          ? images.length > 0 && !loading\r\n            ? \"Resultados de la bÃºsqueda\"\r\n            : \"\"\r\n          : \"TambiÃ©n puedes revisar los gifs en tendencia\"}\r\n      </h2>\r\n      {loading && <Spinner />}\r\n      <div className={`grid-container b-radius5 mode-${cssTextMode}`}>\r\n        {images.length > 0 ? (\r\n          images.map((img) => <GifGridItem key={img.id} {...img} />)\r\n        ) : isSearchSend && !loading ? (\r\n          <NotFoundResult />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../Helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (gifCategory) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n  useEffect(() => {\r\n    getGifs(gifCategory).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false\r\n      });\r\n    });\r\n  }, [gifCategory]);\r\n\r\n  return state;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo-desktop.2f122678.svg\";","export default __webpack_public_path__ + \"static/media/logo-mobile-modo-noct.8c791325.svg\";","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../Context/ContextProvider\";\r\nimport logo from \"../imgs/svg/logo-desktop.svg\";\r\nimport logoDark from \"../imgs/svg/logo-mobile-modo-noct.svg\";\r\n\r\nexport default function Header() {\r\n  const { modeDark, setModeDark, cssTextMode } = useContext(AppContext);\r\n\r\n  return (\r\n    <div className={`mode-${cssTextMode}`}>\r\n      <div className=\"header-container\">\r\n        <img\r\n          className=\"logo-gifos\"\r\n          src={modeDark ? logoDark : logo}\r\n          alt=\"Header Logo\"\r\n        />\r\n        <button\r\n          className={`btn-format btn-mode-${cssTextMode}`}\r\n          onClick={() => setModeDark(!modeDark)}\r\n        >\r\n          MODO {modeDark ? \"LIGHT\" : \"DARK\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { AppContext } from \"./Context/ContextProvider\";\nimport GiphySearchBar from \"./Components/GiphySearchBar\";\nimport GridResult from \"./Components/GridResult\";\nimport Header from \"./Components/Header\";\nimport \"./styles.css\";\nimport \"./styles-responsive.css\";\n\nexport default function App() {\n  const { cssTextMode, gifCategory } = useContext(AppContext);\n  const title = gifCategory ? gifCategory : \"HOME\";\n  const description = gifCategory\n    ? `Resultados sobre gif de ${gifCategory}`\n    : \"Busca tus gif favoritos con GIFos App!\";\n  return (\n    <>\n      <Helmet>\n        <title>{title} | GIFos App |</title>\n        <meta\n          name=\"description\"\n          content={description}\n        />\n      </Helmet>\n      <div className={`App mode-${cssTextMode}`}>\n        <div className={`component-container mode-${cssTextMode}`}>\n          <Header />\n          <GiphySearchBar />\n          <GridResult />\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport ContextProvider from \"./Context/ContextProvider\";\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <ContextProvider>\n    <App />\n  </ContextProvider>,\n  rootElement\n);\n"],"sourceRoot":""}